import { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import DropWrapper from "../components/drop-wrapper";
import Column from "../components/column/column.components";
import { data } from "../data";
import { taskStatusType } from "../constants";
import Item from "../components/item";
import Header from "../components/header";
import CreateNewTask from "../components/create-new-task/";
import Card from "../components/card";

export default function Home() {
  const [columns, setColumns] = useState([]);

  useEffect(() => {
    const createdColumns = Object.values(taskStatusType).map((t) => ({
      title: t,
      values: [],
    }));

    data.forEach((d) => {
      const columnList = createdColumns.find((t) => t.title === d.status);
      columnList.values.push(d);
    });

    setColumns(createdColumns);
  }, []);

  const moveItemWithinColumn = (column, dragIndex, hoverIndex) => {
    // clone state to avoid mutations
    const newColumns = JSON.parse(JSON.stringify(columns));
    // get refs
    const foundColumn = newColumns.find((c) => c.title === column.title);
    const item = foundColumn.values[dragIndex];

    // remove selected item from array while dragged
    const newItems = foundColumn.values.filter((i, idx) => idx !== dragIndex);

    // relocate hovered Item
    newItems.splice(hoverIndex, 0, item);

    // replace values within the column
    foundColumn.values = newItems.filter(Boolean); // fix undefined bug

    // set new state
    setColumns(newColumns);
  };

  const moveItemToDifferentColumn = (fromColumn, toColumn, selectedTaskId) => {
    // clone state to avoid mutations
    const newColumns = JSON.parse(JSON.stringify(columns));

    // get refs
    const fromColumnList = newColumns[fromColumn];
    const taskIndex = fromColumnList.values.findIndex(
      (t) => t.taskId === selectedTaskId,
    );
    const item = fromColumnList.values.splice(taskIndex, 1)[0];
    item.status = newColumns[toColumn].title;
    const toColumnList = newColumns[toColumn];

    // move item from one column to another
    toColumnList.values.push(item);

    // set new state

    setColumns(newColumns);
  };

  const createNewTask = (task) => {
    const newColumns = JSON.parse(JSON.stringify(columns));
    const newTask = {
      taskId: task.taskId,
      title: task.title,
      description: task.description,
      status: task.status,
    };

    const columnList = newColumns.find((t) => t.title === task.status);
    columnList.values.push(newTask);

    setColumns(newColumns);
  };

  return (
    <div className={styles.wrapper}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />

      <div className={styles.columns}>
        {columns.map((c) => {
          return (
            <div key={c.title} className={styles.col_wrapper}>
              <h2 className={styles.col_header}>{c.title}</h2>
              <DropWrapper
                moveItem={moveItemToDifferentColumn}
                columns={columns}
                dropColumn={c}
              >
                <Column>
                  {c.values.map((i, idx) => (
                    <Card key={i.taskId}>
                      <Item
                        item={i}
                        index={idx}
                        moveItem={moveItemWithinColumn}
                        column={c}
                        columns={columns}
                      />
                    </Card>
                  ))}
                  <CreateNewTask status={c.title} createTask={createNewTask} />
                </Column>
              </DropWrapper>
            </div>
          );
        })}
      </div>
    </div>
  );
}
